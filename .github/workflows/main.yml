# This is a basic workflow to help you get started with Actions


name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  
  Check_Validation:
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCEGROUP }}
      STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGEACCOUNT }}
      CONTAINER_NAME: ${{ secrets.AZURE_CONTAINERNAME }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      Blob_Key: ${{ secrets.AZURE_RMKEY}}
    
      group: Test
    steps:
    - uses: actions/checkout@v2
    - # "Note: the 'AZURE_SP' secret is required to be added into GitHub Secrets. See this blog post for details: https://samlearnsazure.blog/2019/12/13/github-actions/"
      name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_SP }}
    
    
#     - uses: cschleiden/replace-tokens@v1
#       with:
#         tokenPrefix: '#{'
#         tokenSuffix: '}#'
#         files: '["${{ github.workspace }}/pipelines/parameters.yml"]'
#       env:
#         BackendService-Arm: ${{secrets.BackendService_Arm}}
#         Env: ${{secrets.Env}}
#         Azure-ResourceGroup: ${{secrets.Azure_ResourceGroup}}
#         Azure-StorageAccount: ${{secrets.Azure_StorageAccount}}
#         Azure-ContainerName: ${{secrets.Azure_ContainerName}}
#         Azure-RmKey: ${{secrets.AZURE_RMKEY}}
     
    - name: Find and Replace User Name - Using Build Variable
      run: |
        find variables.tf -type f -exec sed -i ''s/#{Env-RBac}#/${{ secrets.Env_RBac }}/g'' {} \;
        find variables.tf -type f -exec sed -i  s/#{Vnet-IP}#/'${{ secrets.Vnet_IP }}' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-IP}#/${{ secrets.Subnet_IP }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress1}#/${{ secrets.Subnet_Dsaddress1 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress2}#/${{ secrets.Subnet_Dsaddress2 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Publisher-Email}#/${{ secrets.Publisher_Email }}/g'' {} \;
       
#     - name: Find and Replace User Name - Using Build Variable
#       run: |
#         find pipelines/parameters.yml -type f -exec sed -i ''s/#{Env}#/${{ secrets.Env }}/g'' {} \;
#         find pipelines/parameters.yml -type f -exec sed -i ''s/#{BackendService-Arm}#/${{ secrets.BackendService_Arm }}/g'' {} \;
#         find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-ResourceGroup}#/${{ secrets.Azure_ResourceGroup }}/g'' {} \;
#         find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-StorageAccount}#/${{ secrets.Azure_StorageAccount }}/g'' {} \;
#         find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-ContainerName}#/${{ secrets.Azure_ContainerName }}/g'' {} \;
#         find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-RmKey}#/${{ secrets.Azure_RmKey }}/g'' {} \;
        
#     - uses: cschleiden/replace-tokens@v1
#       with:
#          tokenPrefix: '#{'
#          tokenSuffix: '}#'
#          files: '["${{ github.workspace }}/variables.tf"]'
#       env:
#          Env-RBac: ${{secrets.Env_RBac}}
#          Vnet-IP: ${{secrets.Vnet_IP}}
#          Subnet-IP: ${{secrets.Subnet_IP}}
#          Subnet-Dsaddress1: ${{secrets.Subnet_Dsaddress1}}
#          Subnet-Dsaddress2: ${{secrets.Subnet_Dsaddress2}}
#          Publisher-Email: ${{secrets.Publisher_Email}}

       
       
    - name: Run tmate
      uses: mxschmitt/action-tmate@v2
         
    - run: |
        cat ${{ github.workspace }}/variables.tf
        cat ${{ github.workspace }}/pipelines/parameters.yml
      shell: bash
      
    - name: Install Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install pip3
      run: python -m pip install --upgrade pip setuptools wheel
    - name: Install Checkov using pip3
      run: pip3 install checkov
    - name: Security test with Checkov
      run: checkov -d '${{ github.workspace }}' -o junitxml -s >> checkov_sectests.xml
      
    - name: Publish Security Test Results (Checkov)
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: test-results/**/*.xml   
        
    - name: Terraform Install
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.11
        
    - name: Terraform Init
      run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"  -backend-config="key=$Blob_Key" 
    
#     - name: Terraform Validate
#       run: terraform validate
      
  Deploy:
    needs: Check_Validation 
    runs-on: ubuntu-latest
    # 'Note: Azure DevOps strategy>runOnce does not have an equivalent in GitHub Actions yet, and only the deploy steps are transferred to steps'
    environment:
      name: Test   #Env_Variable
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
    - uses: actions/checkout@v2

#     - uses: cschleiden/replace-tokens@v1
#       with:
#         tokenPrefix: '#{'
#         tokenSuffix: '}#'
#         files: '["${{ github.workspace }}/pipelines/parameters.yml"]'
#       env:
#         BackendService-Arm: ${{secrets.BackendService_Arm}}
#         Env: ${{secrets.Env}}
#         Azure-ResourceGroup: ${{secrets.Azure_ResourceGroup}}
#         Azure-StorageAccount: ${{secrets.Azure_StorageAccount}}
#         Azure-ContainerName: ${{secrets.Azure_ContainerName}}
#         Azure-RmKey: ${{secrets.Azure_RmKey}}
     
    - name: list
      run: |
       cat ${{ github.workspace }}/pipelines/parameters.yml
     
    - name: Find and Replace User Name - Using Build Variable
      run: |
        find variables.tf -type f -exec sed -i ''s/#{Env-RBac}#/${{ secrets.Env_RBac }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Vnet-IP}#/${{ secrets.Vnet_IP }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-IP}#/${{ secrets.Subnet_IP }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress1}#/${{ secrets.Subnet_Dsaddress1 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Subnet-Dsaddress2}#/${{ secrets.Subnet_Dsaddress2 }}/g'' {} \;
        find variables.tf -type f -exec sed -i ''s/#{Publisher-Email}#/${{ secrets.Publisher_Email }}/g'' {} \;
  
      
    - name: Find and Replace User Name - Using Build Variable
      run: |
        find pipelines/parameters.yml -type f -exec sed -i ''s/#{Env}#/${{ secrets.Env }}/g'' {} \;
        find pipelines/parameters.yml -type f -exec sed -i ''s/#{BackendService-Arm}#/${{ secrets.BackendService_Arm }}/g'' {} \;
        find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-ResourceGroup}#/${{ secrets.Azure_ResourceGroup }}/g'' {} \;
        find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-StorageAccount}#/${{ secrets.Azure_StorageAccount }}/g'' {} \;
        find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-ContainerName}#/${{ secrets.Azure_ContainerName }}/g'' {} \;
        find pipelines/parameters.yml -type f -exec sed -i ''s/#{Azure-RmKey}#/${{ secrets.Azure_RmKey }}/g'' {} \;
       
       
#     - uses: cschleiden/replace-tokens@v1
#       with:
#          tokenPrefix: '#{'
#          tokenSuffix: '}#'
#          files: '["${{ github.workspace }}/variables.tf"]'
#       env:
#          Env-RBac: ${{secrets.Env_RBac}}
#          Vnet-IP: ${{secrets.Vnet_IP}}
#          Subnet-IP: ${{secrets.Subnet_IP}}
#          Subnet-Dsaddress1: ${{secrets.Subnet_Dsaddress1}}
#          Subnet-Dsaddress2: ${{secrets.Subnet_Dsaddress2}}
#          Publisher-Email: ${{secrets.Publisher_Email}}
         
    - run: |
        cat ${{ github.workspace }}/variables.tf
        cat ${{ github.workspace }}/pipelines/parameters.yml
      shell: bash
    - name: Terraform Install
      uses: hashicorp/setup-terraform@v1
      with:
         terraform_version: 0.14.11
         
    - name: Terraform Init
      run:  terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"  -backend-config="key=$Blob_Key" 
    - name: Terraform Plan
      run: terraform plan
       
#     - name: Terraform Apply
#       run: terraform apply
                    
   
                    
