trigger: none
pool: 
  vmImage: ubuntu-latest
  variables:
        - group: Test
        - group: Sample
# variables:
#   - template: parameters.yml
  
stages:

 
 - stage: Checkov_Check_And_TerraformValidation
   jobs:
      - job: Checkov_Check_And_TerraformValidation
        variables:
        - group: Test
        steps:
          #Validation of the Templates - Checkov 
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.7'
              addToPath: true
            displayName: 'Install Python 3.7'
          
          - script: python -m pip install --upgrade pip setuptools wheel
            displayName: 'Install pip3'
          
          - script: pip3 install checkov
            displayName: 'Install Checkov using pip3'
          
          - script: checkov -d '$(System.DefaultWorkingDirectory)' -o junitxml -s >> checkov_sectests.xml
            displayName: 'Security test with Checkov'
          
          - task: PublishTestResults@2
            displayName: Publish Security Test Results (Checkov)
            condition: always()
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: '**sectests.xml'
          
          - task: TerraformInstaller@0
            displayName: 'Terraform Install'
            inputs:
              terraformVersion: '0.14.11'

          - task: TerraformTaskV1@0
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: $(BackendService-Arm)
              backendAzureRmResourceGroupName: $(Azure-ResourceGroup)
              backendAzureRmStorageAccountName: $(Azure-StorageAccount)
              backendAzureRmContainerName: $(Azure-ContainerName)
              backendAzureRmKey: $(Azure-RmKey)
              

          - task: TerraformTaskV1@0
            displayName: 'Terraform Validate'
            inputs:
              provider: 'azurerm'
              command: 'validate' 
          
 - stage: deploy_Test
   jobs:    
    - deployment: deploy_terraformiac
      continueOnError: false
      environment: '$(Env)' 
      strategy:
         runOnce:
           deploy:
             steps:
               - checkout: self   
              
               - task: replacetokens@5
                 inputs:
                   targetFiles: '**/parameters.yml'
                   encoding: 'auto'
                   tokenPattern: 'default'
                   writeBOM: true
                   actionOnMissing: 'warn'
                   keepToken: false
                   actionOnNoFiles: 'continue'
                   enableTransforms: false
                   useLegacyPattern: false
                   enableTelemetry: true
              
               - task: replacetokens@5
                 inputs:
                    targetFiles: '**/variables.tf'
                    encoding: 'auto'
                    tokenPattern: 'default'
                    writeBOM: true
                    actionOnMissing: 'warn'
                    keepToken: false
                    actionOnNoFiles: 'continue'
                    enableTransforms: false
                    useLegacyPattern: false
                    enableTelemetry: true
              
               - task: Bash@3
                 inputs:
                   targetType: 'inline'
                   script: |
                     cat $(System.DefaultWorkingDirectory)/variables.tf
                     cat $(System.DefaultWorkingDirectory)/pipelines/parameters.yml
              
               - task: TerraformInstaller@0
                 displayName: 'Terraform Install'
                 inputs:
                   terraformVersion: '0.14.11'  
              
               - task: TerraformTaskV1@0
                 displayName: 'Terraform Init'
                 inputs:
                  provider: 'azurerm'
                  command: 'init'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/'
                  backendServiceArm: '$(BackendService-Arm)'
                  backendAzureRmResourceGroupName: '$(Azure-ResourceGroup)'
                  backendAzureRmStorageAccountName: '$(Azure-StorageAccount)'
                  backendAzureRmContainerName: '$(Azure-ContainerName)'
                  backendAzureRmKey: '$(Azure-RmKey)'

               - task: TerraformTaskV1@0
                 displayName: 'Terraform Plan'
                 inputs:
                   provider: 'azurerm'
                   command: 'plan'
                   environmentServiceNameAzureRM: $(BackendService-Arm)

               - task: TerraformTaskV1@0
                 displayName: 'Terraform Apply'
                 inputs:
                    provider: 'azurerm'
                    command: 'apply'
                    workingDirectory: '$(System.DefaultWorkingDirectory)/'
                    environmentServiceNameAzureRM: '$(BackendService-Arm)'
                
                     
  # - stage: deploy_dev
  #  jobs:
  #   - job: Apply
  #     variables:
  #       - group: DEV
  #     timeoutInMinutes: 180
  #   - deployment: deploy_terraformiac
  #     continueOnError: false
  #     environment: '$(Env)' 
  #     strategy:
  #        runOnce:
  #          deploy:
  #            steps:
  #              - checkout: self   
              
  #              - task: replacetokens@5
  #                inputs:
  #                  targetFiles: '**/parameters.yml'
  #                  encoding: 'auto'
  #                  tokenPattern: 'default'
  #                  writeBOM: true
  #                  actionOnMissing: 'warn'
  #                  keepToken: false
  #                  actionOnNoFiles: 'continue'
  #                  enableTransforms: false
  #                  useLegacyPattern: false
  #                  enableTelemetry: true
              
  #              - task: replacetokens@5
  #                inputs:
  #                   targetFiles: '**/variables.tf'
  #                   encoding: 'auto'
  #                   tokenPattern: 'default'
  #                   writeBOM: true
  #                   actionOnMissing: 'warn'
  #                   keepToken: false
  #                   actionOnNoFiles: 'continue'
  #                   enableTransforms: false
  #                   useLegacyPattern: false
  #                   enableTelemetry: true
              
  #              - task: Bash@3
  #                inputs:
  #                  targetType: 'inline'
  #                  script: |
  #                    cat $(System.DefaultWorkingDirectory)/variables.tf
  #                    cat $(System.DefaultWorkingDirectory)/pipelines/parameters.yml
              
  #              - task: TerraformInstaller@0
  #                displayName: 'Terraform Install'
  #                inputs:
  #                  terraformVersion: '0.14.11'  
              
  #              - task: TerraformTaskV1@0
  #                displayName: 'Terraform Init'
  #                inputs:
  #                 provider: 'azurerm'
  #                 command: 'init'
  #                 workingDirectory: '$(System.DefaultWorkingDirectory)/'
  #                 backendServiceArm: '$(BackendService-Arm)'
  #                 backendAzureRmResourceGroupName: '$(Azure-ResourceGroup)'
  #                 backendAzureRmStorageAccountName: '$(Azure-StorageAccount)'
  #                 backendAzureRmContainerName: '$(Azure-ContainerName)'
  #                 backendAzureRmKey: '$(Azure-RmKey)'

  #              - task: TerraformTaskV1@0
  #                displayName: 'Terraform Plan'
  #                inputs:
  #                  provider: 'azurerm'
  #                  command: 'plan'
  #                  environmentServiceNameAzureRM: $(BackendService-Arm)

  #              - task: ManualValidation@0
  #                inputs:
  #                  notifyUsers: 'sushmita.b.sinha@accenture.com'

  #              - task: TerraformTaskV1@0
  #                displayName: 'Terraform Apply'
  #                inputs:
  #                   provider: 'azurerm'
  #                   command: 'apply'
  #                   workingDirectory: '$(System.DefaultWorkingDirectory)/'
  #                   environmentServiceNameAzureRM: '$(BackendService-Arm)'
                